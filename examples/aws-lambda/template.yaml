AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Infrastructure for deploying the reference receiver to AWS

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: none
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
    ConstraintDescription: Must be dev, build, staging
  TestRoleArn:
    Type: String
    Description: The ARN of the role that will used for integration tests
    Default: none
    AllowedPattern: (none)|(arn:aws:iam::.*:role/.*)
  VpcStackName:
    Type: String
    Description: The name of the stack containing the VPC
    Default: none
  ReceiverEndpoint:
    Type: String
    Default: https://5le9kn7k9l.execute-api.eu-west-2.amazonaws.com/dev/api/v1/Events
    Description: URL endpoint to send verification events to
  Issuer:
    Type: String
    Default: https://r1pke2j3he.execute-api.eu-west-2.amazonaws.com/dev/
    Description: 'Jwt issuer'
  Audience:
    Type: String
    Default: https://5le9kn7k9l.execute-api.eu-west-2.amazonaws.com/dev/

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      jwksUrl: https://ssf-transmitter.transaction.dev.account.gov.uk/jwks.json
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      jwksUrl: https://ssf-transmitter.transaction.build.account.gov.uk/jwks.json
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      jwksUrl: https://ssf-transmitter.transaction.staging.account.gov.uk/jwks.json

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    #checkov:skip=CKV_AWS_117: VPC config
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    Architectures:
      - arm64
    Runtime: nodejs22.x
    Timeout: 30
    MemorySize: 256
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Layers:
      - !Sub
        - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
        - SecretArn:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              dynatraceSecretArn
            ]
    # VpcConfig:
    #   SecurityGroupIds:
    #     - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    #   SubnetIds:
    #     - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
    #     - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
    #     - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

Resources:
  #####################
  # Cognito Resources #
  #####################

  SSrUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-ssr-user-pool

  SSrUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref SSrUserPool
      Domain: !Sub '${AWS::StackName}-ssr-${Environment}'

  SSrSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-ssr-secrets'
      Description: 'Secrets for Signal Exchange Receiver'
      KmsKeyId: '{{resolve:ssm:SecretsKmsKeyArn}}'
      SecretString: !Sub |
        {
          "userPoolId": "${SSrUserPool}",
          "userPoolArn": "${SSrUserPool.Arn}",
          "userPoolClientId": "${SSrUserPoolClient}",
          "userPoolClientSecret": "${SSrUserPoolClient.ClientSecret}",
          "domain": "${SSrUserPoolDomain}",
          'https://${JwksApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/jwks.json'
        }

  SSrSignalResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref SSrUserPool
      Identifier: 'signal'
      Name: !Sub '${AWS::StackName}-signal-resource-server'
      Scopes:
        - ScopeDescription: 'Allows user to post to Events endpoint'
          ScopeName: 'post'

  SSrUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: SSrSignalResourceServer
    Properties:
      UserPoolId: !Ref SSrUserPool
      ClientName: !Sub '${AWS::StackName}-app-client'
      GenerateSecret: true
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthScopes:
        - 'signal/post'
      AllowedOAuthFlowsUserPoolClient: true

  #########################
  # API Gateway Resources  #
  #########################

  SharedSignalsApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching because we are making POST requests
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt SharedSignalsApiAccessLogGroup.Arn
        Format: >-
          {
          "requestId": "$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime": "$context.requestTime",
          "httpMethod": "$context.httpMethod",
          "path": "$context.path",
          "routeKey": "$context.routeKey",
          "status": "$context.status",
          "protocol": "$context.protocol",
          "responseLatency": "$context.responseLatency",
          "responseLength": "$context.responseLength"
          }
      Description: Shared Signals Receiver API Endpoint
      DisableExecuteApiEndpoint: false
      EndpointConfiguration:
        Type: REGIONAL
      Name: !Sub ${AWS::StackName}-shared-signals-receiver-api-endpoint
      TracingEnabled: true
      StageName: !Ref Environment
      # OpenApiVersion is needed to prevent the deployment of a default stage: https://github.com/aws/serverless-application-model/issues/191#issuecomment-516724809
      OpenApiVersion: 3.0.1
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt SSrUserPool.Arn
            AuthorizationScopes:
              - 'signal/post'
            Identity:
              Header: Authorization

  SharedSignalsApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-endpoint-access-logs
      RetentionInDays: 30

  ReceiverFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-receiver
      RetentionInDays: 30

  #########################
  # Receiver Function Scheduler #
  #########################

  HealthCheckScheduledTrigger:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: Periodically trigger the HealthCheck Lambda Function
      FlexibleTimeWindow:
        Mode: FLEXIBLE
        MaximumWindowInMinutes: 5
      ScheduleExpression: 'rate(15 minutes)'
      State: ENABLED
      Target:
        Arn: !GetAtt HealthCheckFunction.Arn
        RoleArn: !GetAtt HealthCheckFunctionScheduledTriggerRole.Arn
  HealthCheckFunctionScheduledTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: EventBridge scheduler role with permissions to invoke health check lambda
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ReceiverFunction:
    #checkov:skip=CKV_AWS_117: VPC config
    #checkov:skip=CKV_AWS_115:Not setting concurrent execution limits
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/examples/aws-lambda/src/lambda/receiver
      Description: Lambda function that processes signal events
      FunctionName: !Sub ${AWS::StackName}-receiver
      Handler: handler.handler
      Role: !GetAtt ReceiverFunctionRole.Arn
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Environment:
        Variables:
          RECEIVER_SECRET_ARN: !Ref SSrSecret
      Events:
        ReceiverAPI:
          Type: Api
          Properties:
            Path: /api/v1/Events
            Method: post
            RestApiId: !Ref SharedSignalsApi
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - 'signal/post'

  ReceiverFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-receiver-role'
      Description: Execution role for receiver role with permissions to access secrets manager
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SSrSecret
        - PolicyName: SSMParamAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/jwks-url'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt ReceiverFunctionLogGroup.Arn

  PermissionforAPItoCallReceiverFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReceiverFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SharedSignalsApi}/*/*/*'

  HealthCheckFunction:
    #checkov:skip=CKV_AWS_117: VPC config
    #checkov:skip=CKV_AWS_115:Not setting concurrent execution limits
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/examples/aws-lambda/src/lambda/healthCheck
      Description: Lambda function that processes period health check
      FunctionName: !Sub ${AWS::StackName}-healthCheck
      Handler: handler.handler
      Role: !GetAtt HealthCheckFunctionRole.Arn

  HealthCheckFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Execution role for health check lambda
      RoleName: !Sub '${AWS::StackName}-healthCheck'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  GoodbyeFunction:
    #checkov:skip=CKV_AWS_117: VPC config
    #checkov:skip=CKV_AWS_115:Not setting concurrent execution limits
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/examples/aws-lambda/src/lambda/goodbye
      Description: Lambda function
      FunctionName: !Sub ${AWS::StackName}-goodbye
      Handler: handler.handler
      Role: !GetAtt GoodbyeFunctionRole.Arn

  GoodbyeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Execution role for Goodbye lambda
      RoleName: !Sub '${AWS::StackName}-goodbye'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  GetJwksFunction:
    #checkov:skip=CKV_AWS_117: VPC config
    #checkov:skip=CKV_AWS_115:Defined in Globals
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/examples/aws-lambda/src/lambda/receiver
      Description: Lambda function that exposes public JWKS
      Handler: handler.handler
      FunctionName: !Sub ${AWS::StackName}-get-jwks-function
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Environment:
        Variables:
          JWKS_URL:
            !FindInMap [EnvironmentConfiguration, !Ref Environment, jwksUrl]
      Role: !GetAtt GetJwksFunctionRole.Arn

  GetJwksFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Execution role for JWKS retrieval lambda
      RoleName: !Sub '${AWS::StackName}-get-jwks-function'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  #####Mock Verification Transmitter Endpoint Resources #######
  SetMockTxApiUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-mock-tx-user-pool

  SetMockTxApiUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: SetMockTxApiResourceServer
    Properties:
      UserPoolId: !Ref SetMockTxApiUserPool
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthScopes:
        - 'set-tx-mock/post'
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: true

  SetMockTxApiResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref SetMockTxApiUserPool
      Identifier: 'set-tx-mock'
      Name: !Sub ${AWS::StackName}-mock-tx-resource-server
      Scopes:
        - ScopeName: 'post'
          ScopeDescription: 'Allow users to post to mock verify endpoint'

  SetMockTxApiUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref SetMockTxApiUserPool
      Domain: !Sub '${AWS::StackName}-mock-tx-${Environment}'

  SetMockTxApiSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-mock-tx-secrets'
      Description: 'Secrets for Mock Tx Transmitter'
      KmsKeyId: '{{resolve:ssm:SecretsKmsKeyArn}}'
      SecretString: !Sub |
        {
          "userPoolId": "${SetMockTxApiUserPool}",
          "userPoolArn": "${SetMockTxApiUserPool.Arn}",
          "userPoolClientId": "${SetMockTxApiUserPoolClient}",
          "userPoolClientSecret": "${SetMockTxApiUserPoolClient.ClientSecret}",
          "domain": "${SetMockTxApiUserPoolDomain}"
        }

  MockVerfTxLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-mock-tx-role'
      Description: Execution role for mock verf transmitter lambda with kms permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: mockVerfTxLambdaPerms
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !GetAtt MockTxKMSKey.Arn
              - Effect: Allow
                Action:
                  - kms:Sign
                  - kms:GetPublicKey
                Resource: !GetAtt MockTxKMSKey.Arn
              - Effect: Allow
                Action:
                  - cognito-idp:InitiateAuth
                Resource: !GetAtt SetMockTxApiUserPool.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt MockVerfTxEventFunctionLogGroup.Arn
                  - !GetAtt MockVerfTxJWKSEndpointFunctionLogGroup.Arn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SSrSecret
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '{{resolve:ssm:SecretsKmsKeyArn}}'

  MockVerfTxEventFunction:
    #checkov:skip=CKV_AWS_117: VPC config
    #checkov:skip=CKV_AWS_115:Not setting concurrent execution limits
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda that sends mock verification events to receiver endpoint
      FunctionName: !Sub '${AWS::StackName}-mock-tx-verification'
      Handler: handler.handler
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      CodeUri: dist/examples/aws-lambda/src/mock-transmitter/verification/
      Role: !GetAtt MockVerfTxLambdaExecutionRole.Arn
      Environment:
        Variables:
          KMS_KEY_ID: !GetAtt MockTxKMSKey.Arn
          RECEIVER_ENDPOINT: !Sub '{{resolve:ssm:/${AWS::StackName}/receiver-endpoint}}'
          RECEIVER_SECRET_ARN: !Ref SSrSecret
          ISSUER: !Sub '{{resolve:ssm:/${AWS::StackName}/mock-tx-issuer}}'
          AUDIENCE: !Sub '{{resolve:ssm:/${AWS::StackName}/receiver-audience}}'
      Events:
        MockTxVerificationApi:
          Type: Api
          Properties:
            RestApiId: !Ref MockTxVerfApiGateway
            Path: /verify
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - 'set-tx-mock/post'

  JwksApiGateway:
    #checkov:skip=CKV_AWS_120
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-jwks-api-endpoint'
      StageName: !Ref Environment
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt JwksApiAccessLogGroup.Arn
        Format: >-
          {
          "requestId": "$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime": "$context.requestTime",
          "httpMethod": "$context.httpMethod",
          "path": "$context.path",
          "routeKey": "$context.routeKey",
          "status": "$context.status",
          "protocol": "$context.protocol",
          "responseLatency": "$context.responseLatency",
          "responseLength": "$context.responseLength"
          }

  JwksApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/jwks-api/${AWS::StackName}-endpoint-access-logs
      RetentionInDays: 30

  JwksUrlParamter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/jwks-url'
      Type: String
      Value: !Sub 'https://${JwksApiGateway}.execute-api.${AWS::Region}.amazon.com/${Environment}/jwks.json'
      Description: 'JWKS URL for JWT validation'

  MockVerfTxJWKSEndpointFunction:
    #checkov:skip=CKV_AWS_115:Not setting concurrent execution limits
    #checkov:skip=CKV_AWS_117:VPC configuration removed for internet access
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda that exposes JWKS endpoint providing public key for JWT verification
      FunctionName: !Sub '${AWS::StackName}-mock-tx-jwks'
      Handler: handler.handler
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      CodeUri: dist/examples/aws-lambda/src/mock-transmitter/jwks/
      Role: !GetAtt MockVerfTxLambdaExecutionRole.Arn
      Environment:
        Variables:
          KMS_KEY_ID: !Ref MockTxKMSKey
      Events:
        MockTxJwksApi:
          Type: Api
          Properties:
            RestApiId: !Ref JwksApiGateway
            Path: /jwks.json
            Method: get

  MockTxVerfApiGateway:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching because we are making POST requests
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-mock-tx-api-endpoint'
      StageName: !Ref Environment
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt MockTxApiAccessLogGroup.Arn
        Format: >-
          {
          "requestId": "$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime": "$context.requestTime",
          "httpMethod": "$context.httpMethod",
          "path": "$context.path",
          "routeKey": "$context.routeKey",
          "status": "$context.status",
          "protocol": "$context.protocol",
          "responseLatency": "$context.responseLatency",
          "responseLength": "$context.responseLength"
          }
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt SetMockTxApiUserPool.Arn
            AuthorizationScopes:
              - 'set-tx-mock/post'
            Identity:
              Header: Authorization

  MockVerfTxEventFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/mock-api/${AWS::StackName}-mock-tx-verification
      RetentionInDays: 30

  MockVerfTxJWKSEndpointFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/mock-api/${AWS::StackName}-mock-tx-jwks
      RetentionInDays: 30

  MockTxApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/mock-api/${AWS::StackName}-endpoint-access-logs
      RetentionInDays: 30

  MockTxKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for mock tx JWT Signing
      KeyUsage: SIGN_VERIFY
      KeySpec: RSA_4096
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: IAM policy
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

Outputs:
  SharedSignalsApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${SharedSignalsApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-SharedSignalsApiUrl'
  ReceiverEventApiUrl:
    Description: URL of the Receiver Event API endpoint
    Value: !Sub 'https://${SharedSignalsApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/v1/Events'
  ReceiverAudience:
    Description: Audience to use in the Mock TX JWT when calling the Receiver Event API
    Value: !Sub 'https://${SharedSignalsApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
  MockTxIssuerUrl:
    Description: Issuer to use in the Mock TX JWT when calling the Receiver Event API
    Value: !Sub 'https://${MockTxVerfApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
  MockTxVerfApiGatewayUrl:
    Value: !Sub 'https://${MockTxVerfApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
  SetMockTxApiUserPoolId:
    Value: !Ref SetMockTxApiUserPool
  SetMockTxApiUserPoolClient:
    Value: !Ref SetMockTxApiUserPoolClient
