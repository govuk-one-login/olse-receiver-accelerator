AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Infrastructure for deploying the reference receiver to AWS

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: none
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
    ConstraintDescription: Must be dev, build, staging
  TestRoleArn:
    Type: String
    Description: The ARN of the role that will used for integration tests
    Default: none
    AllowedPattern: (none)|(arn:aws:iam::.*:role/.*)
  VpcStackName:
    Type: String
    Description: The name of the stack containing the VPC
    Default: none

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    Architectures:
      - arm64
    Runtime: nodejs22.x
    Timeout: 30
    MemorySize: 256
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Layers:
      - !Sub
        - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
        - SecretArn:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              dynatraceSecretArn
            ]
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

Resources:
  #####################
  # Cognito Resources #
  #####################

  SSrUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-ssr-user-pool

  SSrUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: SSrUserPoolId
      Type: String
      Value: !Ref SSrUserPool

  SSrUserPoolArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: SSrUserPoolArn
      Type: String
      Value: !GetAtt SSrUserPool.Arn

  # SSrSignalResourceServer:
  #   Type: AWS::Cognito::UserPoolResourceServer
  #   Properties:
  #     UserPoolId: !Ref SSrUserPool
  #     Identifier: 'signal'
  #     Name: !Sub '${AWS::StackName}-signal-resource-server'
  #     Scopes:
  #       - ScopeDescription: 'Allows user to post to Events endpoint'
  #         ScopeName: 'post'

  #########################
  # API Gateway Resources #
  #########################

  SharedSignalsApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching because we are making POST requests
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt SharedSignalsApiAccessLogGroup.Arn
        Format: >-
          {
          "requestId": "$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime": "$context.requestTime",
          "httpMethod": "$context.httpMethod",
          "path": "$context.path",
          "routeKey": "$context.routeKey",
          "status": "$context.status",
          "protocol": "$context.protocol",
          "responseLatency": "$context.responseLatency",
          "responseLength": "$context.responseLength"
          }
      Description: Shared Signals Receiver API Endpoint
      DisableExecuteApiEndpoint: false
      EndpointConfiguration:
        Type: REGIONAL
      Name: !Sub ${AWS::StackName}-shared-signals-receiver-api-endpoint
      TracingEnabled: true
      StageName: !Ref Environment
      # OpenApiVersion is needed to prevent the deployment of a default stage: https://github.com/aws/serverless-application-model/issues/191#issuecomment-516724809
      OpenApiVersion: 3.0.1
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt SSrUserPool.Arn
            Identity:
              Header: Authorization

  SharedSignalsApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-endpoint-access-logs
      RetentionInDays: 30

  ReceiverFunction:
    #checkov:skip=CKV_AWS_115:Not setting concurrent execution limits
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/examples/aws-lambda/src/lambda/receiver
      FunctionName: !Sub ${AWS::StackName}-receiver
      Handler: handler.handler
      Role: !GetAtt ReceiverFunctionRole.Arn
      Events:
        ReceiverAPI:
          Type: Api
          Properties:
            Path: /api/v1/Events
            Method: post
            RestApiId: !Ref SharedSignalsApi
            Auth:
              Authorizer: CognitoAuthorizer

  ReceiverFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-receiver-role'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  PermissionforAPItoCallReceiverFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReceiverFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SharedSignalsApi}/*/*/*'

  GoodbyeFunction:
    #checkov:skip=CKV_AWS_115:Not setting concurrent execution limits
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/examples/aws-lambda/src/lambda/goodbye
      FunctionName: !Sub ${AWS::StackName}-goodbye
      Handler: handler.handler
      Role: !GetAtt GoodbyeFunctionRole.Arn

  GoodbyeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-goodbye'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
